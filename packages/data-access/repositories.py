from abc import ABC, abstractmethod
from typing import Protocol, Iterable, Any

class UnitOfWork(Protocol):
    async def __aenter__(self): ...
    async def __aexit__(self, exc_type, exc, tb): ...
    async def commit(self): ...
    async def rollback(self): ...

class TaskRepository(ABC):
    @abstractmethod
    async def get(self, tenant_id: str, task_id: str): ...
    @abstractmethod
    async def save(self, tenant_id: str, task: dict): ...
    @abstractmethod
    async def list(self, tenant_id: str, **filters): ...

class LockRepository(ABC):
    @abstractmethod
    async def get(self, tenant_id: str, lock_id: str): ...
    @abstractmethod
    async def save(self, tenant_id: str, lock: dict): ...
    @abstractmethod
    async def list(self, tenant_id: str, **filters): ...

class AgentRepository(ABC):
    @abstractmethod
    async def get(self, tenant_id: str, agent_id: str): ...
    @abstractmethod
    async def save(self, tenant_id: str, agent: dict): ...
    @abstractmethod
    async def list(self, tenant_id: str, **filters): ...